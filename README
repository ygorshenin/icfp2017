This is the writeup for the ICFP Programming Contest 2017 by
team MIPT Lambda.


1. Contest writeup.

* Team, language and environment

  There were two of us this year again. The problem this
  year looked much less amenable to being solved with functional
  languages so we chose Go.

  We used one machine running Debian and one running macOS.

* Lightning round

  We ignored the lightning round completely this time:
  without proper scoreboard and clear rules it just was not worth 
  the effort.
  We managed to implement the protocols and to submit a
  solution that didn't always pass but that's it.

* Playground

  The key instrument in improving solutions was an offline
  playground that we wrote. It enabled us to assess our bots by
  making them play each other. Unfortunately, the analogous
  online playground was lacking. It was not clear how good our
  bots are on average (hourly tournaments would help) and it
  wasn't even clear whether there are more than 10 teams overall.
  So we used the online mode mostly to debug our understanding
  of the non-rigorous parts of the problem statement.

* Visualizer

  Luckily, this time an almost working visualizer was provided
  (it started to break as soon as the extensions poured in),
  so we hacked it around a little to read from a text file
  with the game log and display the game in action.
  We are not sure whether it was useful but at least it was
  pleasant to watch.

* Solution overview

  In the preprocessing stage, we only store the very basic
  information about the graph, such as the distances from mines
  to sites. In the futures mode, we tried to pick a random
  future for each mine in its Voronoi cell if the cell is
  sufficiently dense (otherwise, we tried to pick closer
  sites as futures in order not to lose much).

  We choose based on several heuristics whether to extend the
  number of liberties in a bfs-like fashion or greedily add
  the edge that gives the largest profit.

  We did not have time to implement any adversarial strategies
  such as detecting opponents that are building long paths
  and blocking their way.

  We do not use neither splurges nor options.


2. Information about the project.

  The project has the following structure:

    README                 This file.

    install                The installation script, as required by
                           the problem statement.

    make_submission.sh     A script that packs the git repository
                           into a file ready for submission.

  + maps/                  The maps provided by the organizers.

    run-all-maps           A helper script to set up several bots
                           against each other on all the maps and
                           print the performance statistics.

  + src/

      + common/            Some common files and the proxy that maps
                           arbitrary site ids to the much more convenient
                           range of [0..NumSites).

      + game/              Data structures and bots.

      + playground/        Code for the bot arena.

      + punter/            The program implementing the offline mode protocol.
    
      + vis                The visualizer. Mostly copied from the Î» Punter FX.

    team_id.txt            Our team id.


3. Example usage.

* Online mode

   To test the punter in the online mode, you will need the Lambda Duct simulator
   which can be built from the sources at https://github.com/icfpcontest2017/lambda-duct

   Once you have built lambduct, run the ./install script to build the punter binary
   and then run

   % ./lamduct --client-instance-logfile /dev/stdout --game-port 9240 ./punter

   to join the game at port 9240. The bot type that will be used is hardcoded in src/punter/main.go

* Playground mode

   After running the ./install script, you can run the playground manually
   by typing, for example,

   % ./playground --map ../../maps/edinburgh-sparse.json \
      --bots 'random0,baseline' --settings 'futures' --visfile vis.txt

   For the list of options, type

   % ./playground --help

   There is also an option to invoke the playground on all the maps.
   In the project root directory, type

   % ./run-all-maps 'baseline*16'

   to see the results of the games with 16 simple bots on all maps.

* Visualizer

   Having generated a vis.txt log file in the playground (see above),
   you may want to visualize the game. Open src/vis/lpfx.htm in
   your web browser, press the button and choose the game log file.
